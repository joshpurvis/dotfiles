" .vimrc
set nocompatible
filetype off
setlocal spell spelllang=en_us
set foldlevelstart=99
set winwidth=110
set autoread

" Vundle bundles
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.fzf

call vundle#begin()
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'arcticicestudio/nord-vim'
    Plugin 'tpope/vim-fugitive'
    Plugin 'tpope/vim-surround'
    Plugin 'jiangmiao/auto-pairs'
    Plugin 'junegunn/fzf.vim' 
    Plugin 'ervandew/supertab'
    Plugin 'itchyny/lightline.vim'
    Plugin 'davidhalter/jedi-vim'
    Plugin 'Valloric/YouCompleteMe'
    Plugin 'Lokaltog/vim-easymotion'
    Plugin 'airblade/vim-gitgutter'
    Plugin 'https://tpope.io/vim/dadbod.git'
    Plugin 'haya14busa/incsearch.vim'
    Plugin 'zah/nim.vim'
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
    Plugin 'pangloss/vim-javascript'
    Plugin 'mxw/vim-jsx'
    Plugin 'tpope/vim-sensible'
    Plugin 'aperezdc/vim-template'
    "Plugin 'w0rp/ale'
    "Plugin 'vim-syntastic/syntastic'
    "Plugin 'edkolev/tmuxline.vim'
    "Plugin 'flazz/vim-colorschemes'
    "Plugin 'hashivim/vim-hashicorp-tools'
    "Plugin 'sheerun/vim-polyglot'
    "Plugin 'vim-airline/vim-airline'
    "  Plugin 'morhetz/gruvbox'
    "Bundle 'git://git.wincent.com/command-t.git'
    "Bundle 'nvie/vim-flake8'
    "Bundle 'terryma/vim-multiple-cursors'
    "Plugin 'klen/python-mode'
    "Bundle 'scrooloose/nerdtree'
    "Plugin 'fatih/vim-go'
    "
call vundle#end()

" general 
syntax on
colorscheme nord 
set mouse=a
set updatetime=250
set hidden               "hide buffers instead of closing
"set tabstop=4            "set default tabbing to 4 spaces
"set autoindent
"set expandtab
"set shiftwidth=4         "spaces to use for autoindenting
"set shiftround           "multiple shiftwidth with carrots
"set smarttab
set nonumber 
set wildmenu
set showcmd
set ruler
set laststatus=2
set noshowmode
set showmatch            "show matching brackets"
set pastetoggle=<F2>
"set t_Co=256
set timeoutlen=1000 ttimeoutlen=0    " remove delay when switching modes
let mapleader = " "

" searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" hack for when vim is in tmux and 256 color
"if &term =~ '256color'
"	set t_ut=
"endif

" hybrid relative/absolute line numbers
"set rnu
"au BufEnter * :set rnu
"au BufLeave * :set nu
"au WinEnter * :set rnu
"au WinLeave * :set nu
"au InsertEnter * :set nu
"au InsertLeave * :set rnu
"au FocusLost * :set nu
"au FocusGained * :set rnu

" navigate by display lines
noremap j gj
noremap k gk

" folds
nnoremap <space> za
vnoremap <space> zf
" doesn't work yet 
" nnoremap <expr> <S-Space> &foldlevel ? 'zM' : 'zR'

" clear highlights on \ 
noremap \ :noh<return><esc>

" make Y yank til the eol similar to C/D
map Y y$

" write to sudo when you forget
cmap w!! w !sudo tee % >/dev/null

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nmap <leader>v :tabedit $MYVIMRC<CR>

" ctrl+shift+v auto switches pastemode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" Map <C-L> to also toggle search highlighting until the next search
nnoremap <C-L> :nohl<CR><C-L>

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Easy window navigation
map <C-h> <C-W>h_
map <C-j> <C-W>j_
map <C-k> <C-W>k_
map <C-l> <C-W>l_

" Easy buffer switching
nnoremap <silent> H :bp<CR>
nnoremap <silent> L :bn<CR>

" enable transparency with uxrvt + vim
hi Normal ctermbg=NONE 

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59
highlight Visual ctermbg=138
highlight Visual ctermfg=255



" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

" fzf settings
nmap ; :Buffers<CR>
nmap <Leader>r :Tags<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>a :Ag<CR>
nmap <C-t> :Files<CR>
nnoremap ? :GFiles<CR>
let g:fzf_history_dir = '~/.local/share/fzf-history'

" ale settings
let g:ale_sign_column_always = 1
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
let g:ale_completion_enabled = 1
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

" F6 toggles spellcheck
map <F6> :setlocal spell! spelllang=en_us<CR>

" fix ugly spellcheck
highlight SpellBad cterm=underline ctermfg=167 ctermbg=NONE guibg=NONE

let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

" Fix git gutter ugly gray bar
highlight LineNr ctermbg=None
highlight SignColumn ctermbg=NONE
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=yellow
highlight GitGutterDelete ctermfg=red
highlight GitGutterChangeDelete ctermfg=yellow

" fix the theme insert/normal colors for jellybeans
let g:lightline = { 'colorscheme': 'seoul256' }

"let g:jedi#show_call_signatures = "0"


"  sane line joins
if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j
endif

" handle git hunks with c-n and c-p
" nnoremap <c-N> :GitGutterNextHunk<CR>
" nnoremap <c-P> :GitGutterPrevHunk<CR>
"nnoremap <c-U> :GitGutterUndoHunk<CR>


nmap F <Plug>(easymotion-prefix)s

" bad habits
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" open previous file with backspace
noremap <BS> <C-^>

set undofile
set undodir=~/.vimundo/

" python 
autocmd FileType python set foldmethod=indent

" incsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" javascript / jsx
let g:jsx_ext_required = 0
autocmd FileType javascript setlocal shiftwidth=2 softtabstop=2 tabstop=2
let g:syntastic_javascript_eslint_args = ['--fix']
au VimEnter *.js au BufWritePost *.js checktime
let g:syntastic_javascript_checkers = ['eslint']

" autofix with eslint
function! SyntasticCheckHook(errors)
  checktime
endfunction

" Ultrsnips

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ["<C-n>", "<Down>"]
let g:ycm_key_list_previous_completion = ["<C-p>", "<Up>"]
let g:SuperTabDefaultCompletionType = "<C-n>"

" better key bindings for UltiSnipsExpandTrigger
"let g:UltiSnipsExpandTrigger = "<tab>" 
let g:UltiSnipsListSnippets="<c-e>"
let g:UltiSnipsEditSplit="vertical"
"let g:UltiSnipsJumpForwardTrigger = "<tab>"
"let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"

" allow tab completion to work with snippets
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

" neovim specific settings
if has("nvim")
   set inccommand=nosplit 
endif
